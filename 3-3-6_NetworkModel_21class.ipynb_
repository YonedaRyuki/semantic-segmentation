{"nbformat":4,"nbformat_minor":0,"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.6.5"},"colab":{"name":"3-3-6_NetworkModel.ipynb","provenance":[]}},"cells":[{"cell_type":"markdown","metadata":{"id":"kMMLy-dSB9GE"},"source":["# 3.3～3.6 ネットワークモデルの作成\n","\n","- 本ファイルでは、PSPNetのネットワークモデルと順伝搬forward関数を作成します。\n"]},{"cell_type":"markdown","metadata":{"id":"mHOFXu9cB9GG"},"source":["# 3.3 学習目標\n","\n","1.\tPSPNetのネットワーク構造をモジュール単位で理解する\n","2.\tPSPNetを構成する各モジュールの役割を理解する\n","3.\tPSPNetのネットワーククラスの実装を理解する\n"]},{"cell_type":"markdown","metadata":{"id":"OxmeTMTIB9GH"},"source":["# 3.4 学習目標\n","\n","1.\tFeatureモジュールのサブネットワーク構成を理解する\n","2.\tサブネットワークFeatureMap_convolution を実装できるようになる\n","3.\tResidual Blockを理解する\n","4.\tDilated Convolutionを理解する\n","5.\tサブネットワークbottleNeckPSPとbottleNeckIdentifyPSPを実装できるようになる\n","6.\tFeatureモジュールを実装できるようになる\n"]},{"cell_type":"markdown","metadata":{"id":"ciS7KpvAB9GI"},"source":["# 3.5 学習目標\n","\n","1.\tPyramid Poolingモジュールのサブネットワーク構成を理解する\n","2.\tPyramid Poolingモジュールのマルチスケール処理の実現方法を理解する\n","3.\tPyramid Poolingモジュールを実装できるようになる\n"]},{"cell_type":"markdown","metadata":{"id":"ZHkPTCjfB9GI"},"source":["# 3.6 学習目標\n","\n","1.\tDecoderモジュールのサブネットワーク構成を理解する\n","2.\tDecoder モジュールを実装できるようになる\n","3.\tAuxLossモジュールのサブネットワーク構成を理解する\n","4.\tAuxLossモジュールを実装できるようになる\n"]},{"cell_type":"markdown","metadata":{"id":"p5mN6uUQB9GJ"},"source":["# 事前準備\n","\n","\n","とくになし"]},{"cell_type":"code","metadata":{"id":"cUgOd6iCB9GK","executionInfo":{"status":"ok","timestamp":1632469721667,"user_tz":-540,"elapsed":4137,"user":{"displayName":"龍","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10936710371482780121"}}},"source":["# パッケージのimport\n","import torch\n","import torch.nn as nn\n","import torch.nn.functional as F"],"execution_count":1,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"0kk0xHbxB9GL"},"source":["# 3.3 PSPNetのネットワーク構造"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tUd25fU3qX7N","executionInfo":{"status":"ok","timestamp":1632469743128,"user_tz":-540,"elapsed":21466,"user":{"displayName":"龍","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10936710371482780121"}},"outputId":"b7205b29-243f-4835-ca19-a91bc3fda9e1"},"source":["from google.colab import drive\n","drive.mount('/content/drive')"],"execution_count":2,"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}]},{"cell_type":"code","metadata":{"id":"ID2fpx_WB9GM","executionInfo":{"status":"ok","timestamp":1632469745183,"user_tz":-540,"elapsed":189,"user":{"displayName":"龍","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10936710371482780121"}}},"source":["class PSPNet(nn.Module):\n","    def __init__(self, n_classes):\n","        super(PSPNet, self).__init__()\n","\n","        # パラメータ設定\n","        block_config = [3, 4, 6, 3]  # resnet50\n","        img_size = 475\n","        img_size_8 = 60  # img_sizeの1/8に\n","\n","        # 4つのモジュールを構成するサブネットワークの用意\n","        self.feature_conv = FeatureMap_convolution()\n","        self.feature_res_1 = ResidualBlockPSP(\n","            n_blocks=block_config[0], in_channels=128, mid_channels=64, out_channels=256, stride=1, dilation=1)\n","        self.feature_res_2 = ResidualBlockPSP(\n","            n_blocks=block_config[1], in_channels=256, mid_channels=128, out_channels=512, stride=2, dilation=1)\n","        self.feature_dilated_res_1 = ResidualBlockPSP(\n","            n_blocks=block_config[2], in_channels=512, mid_channels=256, out_channels=1024, stride=1, dilation=2)\n","        self.feature_dilated_res_2 = ResidualBlockPSP(\n","            n_blocks=block_config[3], in_channels=1024, mid_channels=512, out_channels=2048, stride=1, dilation=4)\n","\n","        self.pyramid_pooling = PyramidPooling(in_channels=2048, pool_sizes=[\n","            6, 3, 2, 1], height=img_size_8, width=img_size_8)\n","\n","        self.decode_feature = DecodePSPFeature(\n","            height=img_size, width=img_size, n_classes=n_classes)\n","\n","        self.aux = AuxiliaryPSPlayers(\n","            in_channels=1024, height=img_size, width=img_size, n_classes=n_classes)\n","\n","    def forward(self, x):\n","        x = self.feature_conv(x)\n","        x = self.feature_res_1(x)\n","        x = self.feature_res_2(x)\n","        x = self.feature_dilated_res_1(x)\n","\n","        output_aux = self.aux(x)  # Featureモジュールの途中をAuxモジュールへ\n","\n","        x = self.feature_dilated_res_2(x)\n","\n","        x = self.pyramid_pooling(x)\n","        output = self.decode_feature(x)\n","\n","        return (output, output_aux)\n"],"execution_count":4,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DPBl8y1RB9GN"},"source":["# 3.4 Featureモジュール"]},{"cell_type":"code","metadata":{"id":"xdlIZWxjB9GN","executionInfo":{"status":"ok","timestamp":1632469750929,"user_tz":-540,"elapsed":377,"user":{"displayName":"龍","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10936710371482780121"}}},"source":["class conv2DBatchNormRelu(nn.Module):\n","    def __init__(self, in_channels, out_channels, kernel_size, stride, padding, dilation, bias):\n","        super(conv2DBatchNormRelu, self).__init__()\n","        self.conv = nn.Conv2d(in_channels, out_channels,\n","                              kernel_size, stride, padding, dilation, bias=bias)\n","        self.batchnorm = nn.BatchNorm2d(out_channels)\n","        self.relu = nn.ReLU(inplace=True)\n","        # inplase設定で入力を保存せずに出力を計算し、メモリ削減する\n","\n","    def forward(self, x):\n","        x = self.conv(x)\n","        x = self.batchnorm(x)\n","        outputs = self.relu(x)\n","\n","        return outputs\n"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"_jm_GmT1B9GO","executionInfo":{"status":"ok","timestamp":1632469753818,"user_tz":-540,"elapsed":336,"user":{"displayName":"龍","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10936710371482780121"}}},"source":["class FeatureMap_convolution(nn.Module):\n","    def __init__(self):\n","        '''構成するネットワークを用意'''\n","        super(FeatureMap_convolution, self).__init__()\n","\n","        # 畳み込み層1\n","        in_channels, out_channels, kernel_size, stride, padding, dilation, bias = 3, 64, 3, 2, 1, 1, False\n","        self.cbnr_1 = conv2DBatchNormRelu(\n","            in_channels, out_channels, kernel_size, stride, padding, dilation, bias)\n","\n","        # 畳み込み層2\n","        in_channels, out_channels, kernel_size, stride, padding, dilation, bias = 64, 64, 3, 1, 1, 1, False\n","        self.cbnr_2 = conv2DBatchNormRelu(\n","            in_channels, out_channels, kernel_size, stride, padding, dilation, bias)\n","\n","        # 畳み込み層3\n","        in_channels, out_channels, kernel_size, stride, padding, dilation, bias = 64, 128, 3, 1, 1, 1, False\n","        self.cbnr_3 = conv2DBatchNormRelu(\n","            in_channels, out_channels, kernel_size, stride, padding, dilation, bias)\n","\n","        # MaxPooling層\n","        self.maxpool = nn.MaxPool2d(kernel_size=3, stride=2, padding=1)\n","\n","    def forward(self, x):\n","        x = self.cbnr_1(x)\n","        x = self.cbnr_2(x)\n","        x = self.cbnr_3(x)\n","        outputs = self.maxpool(x)\n","        return outputs\n"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"ROZ96wqfB9GO","executionInfo":{"status":"ok","timestamp":1632469755408,"user_tz":-540,"elapsed":197,"user":{"displayName":"龍","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10936710371482780121"}}},"source":["class ResidualBlockPSP(nn.Sequential):\n","    def __init__(self, n_blocks, in_channels, mid_channels, out_channels, stride, dilation):\n","        super(ResidualBlockPSP, self).__init__()\n","\n","        # bottleNeckPSPの用意\n","        self.add_module(\n","            \"block1\",\n","            bottleNeckPSP(in_channels, mid_channels,\n","                          out_channels, stride, dilation)\n","        )\n","\n","        # bottleNeckIdentifyPSPの繰り返しの用意\n","        for i in range(n_blocks - 1):\n","            self.add_module(\n","                \"block\" + str(i+2),\n","                bottleNeckIdentifyPSP(\n","                    out_channels, mid_channels, stride, dilation)\n","            )\n"],"execution_count":7,"outputs":[]},{"cell_type":"code","metadata":{"id":"Mm1KqVASB9GP","executionInfo":{"status":"ok","timestamp":1632469757813,"user_tz":-540,"elapsed":192,"user":{"displayName":"龍","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10936710371482780121"}}},"source":["class conv2DBatchNorm(nn.Module):\n","    def __init__(self, in_channels, out_channels, kernel_size, stride, padding, dilation, bias):\n","        super(conv2DBatchNorm, self).__init__()\n","        self.conv = nn.Conv2d(in_channels, out_channels,\n","                              kernel_size, stride, padding, dilation, bias=bias)\n","        self.batchnorm = nn.BatchNorm2d(out_channels)\n","\n","    def forward(self, x):\n","        x = self.conv(x)\n","        outputs = self.batchnorm(x)\n","\n","        return outputs\n"],"execution_count":8,"outputs":[]},{"cell_type":"code","metadata":{"id":"wJWUzM_LB9GQ","executionInfo":{"status":"ok","timestamp":1632469759999,"user_tz":-540,"elapsed":204,"user":{"displayName":"龍","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10936710371482780121"}}},"source":["class bottleNeckPSP(nn.Module):\n","    def __init__(self, in_channels, mid_channels, out_channels, stride, dilation):\n","        super(bottleNeckPSP, self).__init__()\n","\n","        self.cbr_1 = conv2DBatchNormRelu(\n","            in_channels, mid_channels, kernel_size=1, stride=1, padding=0, dilation=1, bias=False)\n","        self.cbr_2 = conv2DBatchNormRelu(\n","            mid_channels, mid_channels, kernel_size=3, stride=stride, padding=dilation, dilation=dilation, bias=False)\n","        self.cb_3 = conv2DBatchNorm(\n","            mid_channels, out_channels, kernel_size=1, stride=1, padding=0, dilation=1, bias=False)\n","\n","        # スキップ結合\n","        self.cb_residual = conv2DBatchNorm(\n","            in_channels, out_channels, kernel_size=1, stride=stride, padding=0, dilation=1, bias=False)\n","\n","        self.relu = nn.ReLU(inplace=True)\n","\n","    def forward(self, x):\n","        conv = self.cb_3(self.cbr_2(self.cbr_1(x)))\n","        residual = self.cb_residual(x)\n","        return self.relu(conv + residual)\n"],"execution_count":9,"outputs":[]},{"cell_type":"code","metadata":{"id":"2hExZpt6B9GQ","executionInfo":{"status":"ok","timestamp":1632469762177,"user_tz":-540,"elapsed":188,"user":{"displayName":"龍","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10936710371482780121"}}},"source":["class bottleNeckIdentifyPSP(nn.Module):\n","    def __init__(self, in_channels, mid_channels, stride, dilation):\n","        super(bottleNeckIdentifyPSP, self).__init__()\n","\n","        self.cbr_1 = conv2DBatchNormRelu(\n","            in_channels, mid_channels, kernel_size=1, stride=1, padding=0, dilation=1, bias=False)\n","        self.cbr_2 = conv2DBatchNormRelu(\n","            mid_channels, mid_channels, kernel_size=3, stride=1, padding=dilation, dilation=dilation, bias=False)\n","        self.cb_3 = conv2DBatchNorm(\n","            mid_channels, in_channels, kernel_size=1, stride=1, padding=0, dilation=1, bias=False)\n","        self.relu = nn.ReLU(inplace=True)\n","\n","    def forward(self, x):\n","        conv = self.cb_3(self.cbr_2(self.cbr_1(x)))\n","        residual = x\n","        return self.relu(conv + residual)\n"],"execution_count":10,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"GiH6S6DmB9GQ"},"source":["# 3.5 Pyramid Poolingモジュール"]},{"cell_type":"code","metadata":{"id":"_KgcVKVbB9GR","executionInfo":{"status":"ok","timestamp":1632469765647,"user_tz":-540,"elapsed":428,"user":{"displayName":"龍","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10936710371482780121"}}},"source":["class PyramidPooling(nn.Module):\n","    def __init__(self, in_channels, pool_sizes, height, width):\n","        super(PyramidPooling, self).__init__()\n","\n","        # forwardで使用する画像サイズ\n","        self.height = height\n","        self.width = width\n","\n","        # 各畳み込み層の出力チャネル数\n","        out_channels = int(in_channels / len(pool_sizes))\n","\n","        # 各畳み込み層を作成\n","        # この実装方法は愚直すぎてfor文で書きたいところですが、分かりやすさを優先しています\n","        # pool_sizes: [6, 3, 2, 1]\n","        self.avpool_1 = nn.AdaptiveAvgPool2d(output_size=pool_sizes[0])\n","        self.cbr_1 = conv2DBatchNormRelu(\n","            in_channels, out_channels, kernel_size=1, stride=1, padding=0, dilation=1, bias=False)\n","\n","        self.avpool_2 = nn.AdaptiveAvgPool2d(output_size=pool_sizes[1])\n","        self.cbr_2 = conv2DBatchNormRelu(\n","            in_channels, out_channels, kernel_size=1, stride=1, padding=0, dilation=1, bias=False)\n","\n","        self.avpool_3 = nn.AdaptiveAvgPool2d(output_size=pool_sizes[2])\n","        self.cbr_3 = conv2DBatchNormRelu(\n","            in_channels, out_channels, kernel_size=1, stride=1, padding=0, dilation=1, bias=False)\n","\n","        self.avpool_4 = nn.AdaptiveAvgPool2d(output_size=pool_sizes[3])\n","        self.cbr_4 = conv2DBatchNormRelu(\n","            in_channels, out_channels, kernel_size=1, stride=1, padding=0, dilation=1, bias=False)\n","\n","    def forward(self, x):\n","\n","        out1 = self.cbr_1(self.avpool_1(x))\n","        out1 = F.interpolate(out1, size=(\n","            self.height, self.width), mode=\"bilinear\", align_corners=True)\n","\n","        out2 = self.cbr_2(self.avpool_2(x))\n","        out2 = F.interpolate(out2, size=(\n","            self.height, self.width), mode=\"bilinear\", align_corners=True)\n","\n","        out3 = self.cbr_3(self.avpool_3(x))\n","        out3 = F.interpolate(out3, size=(\n","            self.height, self.width), mode=\"bilinear\", align_corners=True)\n","\n","        out4 = self.cbr_4(self.avpool_4(x))\n","        out4 = F.interpolate(out4, size=(\n","            self.height, self.width), mode=\"bilinear\", align_corners=True)\n","\n","        # 最終的に結合させる、dim=1でチャネル数の次元で結合\n","        output = torch.cat([x, out1, out2, out3, out4], dim=1)\n","\n","        return output\n"],"execution_count":11,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"Q3iK8fkdB9GR"},"source":["# 3.6 Decoder、AuxLossモジュール"]},{"cell_type":"code","metadata":{"id":"Tx01cGUJB9GR","executionInfo":{"status":"ok","timestamp":1632469769349,"user_tz":-540,"elapsed":197,"user":{"displayName":"龍","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10936710371482780121"}}},"source":["class DecodePSPFeature(nn.Module):\n","    def __init__(self, height, width, n_classes):\n","        super(DecodePSPFeature, self).__init__()\n","\n","        # forwardで使用する画像サイズ\n","        self.height = height\n","        self.width = width\n","\n","        self.cbr = conv2DBatchNormRelu(\n","            in_channels=4096, out_channels=512, kernel_size=3, stride=1, padding=1, dilation=1, bias=False)\n","        self.dropout = nn.Dropout2d(p=0.1)\n","        self.classification = nn.Conv2d(\n","            in_channels=512, out_channels=n_classes, kernel_size=1, stride=1, padding=0)\n","\n","    def forward(self, x):\n","        x = self.cbr(x)\n","        x = self.dropout(x)\n","        x = self.classification(x)\n","        output = F.interpolate(\n","            x, size=(self.height, self.width), mode=\"bilinear\", align_corners=True)\n","\n","        return output\n"],"execution_count":12,"outputs":[]},{"cell_type":"code","metadata":{"id":"WttlkmhyB9GS","executionInfo":{"status":"ok","timestamp":1632469771696,"user_tz":-540,"elapsed":356,"user":{"displayName":"龍","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10936710371482780121"}}},"source":["class AuxiliaryPSPlayers(nn.Module):\n","    def __init__(self, in_channels, height, width, n_classes):\n","        super(AuxiliaryPSPlayers, self).__init__()\n","\n","        # forwardで使用する画像サイズ\n","        self.height = height\n","        self.width = width\n","\n","        self.cbr = conv2DBatchNormRelu(\n","            in_channels=in_channels, out_channels=256, kernel_size=3, stride=1, padding=1, dilation=1, bias=False)\n","        self.dropout = nn.Dropout2d(p=0.1)\n","        self.classification = nn.Conv2d(\n","            in_channels=256, out_channels=n_classes, kernel_size=1, stride=1, padding=0)\n","\n","    def forward(self, x):\n","        x = self.cbr(x)\n","        x = self.dropout(x)\n","        x = self.classification(x)\n","        output = F.interpolate(\n","            x, size=(self.height, self.width), mode=\"bilinear\", align_corners=True)\n","\n","        return output\n"],"execution_count":13,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"2KE2n8kOB9GS"},"source":["# 動作確認"]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ydAFTLWFB9GS","executionInfo":{"status":"ok","timestamp":1632469774823,"user_tz":-540,"elapsed":791,"user":{"displayName":"龍","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10936710371482780121"}},"outputId":"5a830fa4-fe88-426a-f5f6-4940405b0a5d"},"source":["# モデルの定義\n","net = PSPNet(n_classes=21)\n","net"],"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["PSPNet(\n","  (feature_conv): FeatureMap_convolution(\n","    (cbnr_1): conv2DBatchNormRelu(\n","      (conv): Conv2d(3, 64, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","      (batchnorm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","    )\n","    (cbnr_2): conv2DBatchNormRelu(\n","      (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (batchnorm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","    )\n","    (cbnr_3): conv2DBatchNormRelu(\n","      (conv): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (batchnorm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","    )\n","    (maxpool): MaxPool2d(kernel_size=3, stride=2, padding=1, dilation=1, ceil_mode=False)\n","  )\n","  (feature_res_1): ResidualBlockPSP(\n","    (block1): bottleNeckPSP(\n","      (cbr_1): conv2DBatchNormRelu(\n","        (conv): Conv2d(128, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu): ReLU(inplace=True)\n","      )\n","      (cbr_2): conv2DBatchNormRelu(\n","        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu): ReLU(inplace=True)\n","      )\n","      (cb_3): conv2DBatchNorm(\n","        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","      (cb_residual): conv2DBatchNorm(\n","        (conv): Conv2d(128, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","      (relu): ReLU(inplace=True)\n","    )\n","    (block2): bottleNeckIdentifyPSP(\n","      (cbr_1): conv2DBatchNormRelu(\n","        (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu): ReLU(inplace=True)\n","      )\n","      (cbr_2): conv2DBatchNormRelu(\n","        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu): ReLU(inplace=True)\n","      )\n","      (cb_3): conv2DBatchNorm(\n","        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","      (relu): ReLU(inplace=True)\n","    )\n","    (block3): bottleNeckIdentifyPSP(\n","      (cbr_1): conv2DBatchNormRelu(\n","        (conv): Conv2d(256, 64, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu): ReLU(inplace=True)\n","      )\n","      (cbr_2): conv2DBatchNormRelu(\n","        (conv): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu): ReLU(inplace=True)\n","      )\n","      (cb_3): conv2DBatchNorm(\n","        (conv): Conv2d(64, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","      (relu): ReLU(inplace=True)\n","    )\n","  )\n","  (feature_res_2): ResidualBlockPSP(\n","    (block1): bottleNeckPSP(\n","      (cbr_1): conv2DBatchNormRelu(\n","        (conv): Conv2d(256, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu): ReLU(inplace=True)\n","      )\n","      (cbr_2): conv2DBatchNormRelu(\n","        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(2, 2), padding=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu): ReLU(inplace=True)\n","      )\n","      (cb_3): conv2DBatchNorm(\n","        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","      (cb_residual): conv2DBatchNorm(\n","        (conv): Conv2d(256, 512, kernel_size=(1, 1), stride=(2, 2), bias=False)\n","        (batchnorm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","      (relu): ReLU(inplace=True)\n","    )\n","    (block2): bottleNeckIdentifyPSP(\n","      (cbr_1): conv2DBatchNormRelu(\n","        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu): ReLU(inplace=True)\n","      )\n","      (cbr_2): conv2DBatchNormRelu(\n","        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu): ReLU(inplace=True)\n","      )\n","      (cb_3): conv2DBatchNorm(\n","        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","      (relu): ReLU(inplace=True)\n","    )\n","    (block3): bottleNeckIdentifyPSP(\n","      (cbr_1): conv2DBatchNormRelu(\n","        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu): ReLU(inplace=True)\n","      )\n","      (cbr_2): conv2DBatchNormRelu(\n","        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu): ReLU(inplace=True)\n","      )\n","      (cb_3): conv2DBatchNorm(\n","        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","      (relu): ReLU(inplace=True)\n","    )\n","    (block4): bottleNeckIdentifyPSP(\n","      (cbr_1): conv2DBatchNormRelu(\n","        (conv): Conv2d(512, 128, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu): ReLU(inplace=True)\n","      )\n","      (cbr_2): conv2DBatchNormRelu(\n","        (conv): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu): ReLU(inplace=True)\n","      )\n","      (cb_3): conv2DBatchNorm(\n","        (conv): Conv2d(128, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","      (relu): ReLU(inplace=True)\n","    )\n","  )\n","  (feature_dilated_res_1): ResidualBlockPSP(\n","    (block1): bottleNeckPSP(\n","      (cbr_1): conv2DBatchNormRelu(\n","        (conv): Conv2d(512, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu): ReLU(inplace=True)\n","      )\n","      (cbr_2): conv2DBatchNormRelu(\n","        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)\n","        (batchnorm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu): ReLU(inplace=True)\n","      )\n","      (cb_3): conv2DBatchNorm(\n","        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","      (cb_residual): conv2DBatchNorm(\n","        (conv): Conv2d(512, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","      (relu): ReLU(inplace=True)\n","    )\n","    (block2): bottleNeckIdentifyPSP(\n","      (cbr_1): conv2DBatchNormRelu(\n","        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu): ReLU(inplace=True)\n","      )\n","      (cbr_2): conv2DBatchNormRelu(\n","        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)\n","        (batchnorm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu): ReLU(inplace=True)\n","      )\n","      (cb_3): conv2DBatchNorm(\n","        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","      (relu): ReLU(inplace=True)\n","    )\n","    (block3): bottleNeckIdentifyPSP(\n","      (cbr_1): conv2DBatchNormRelu(\n","        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu): ReLU(inplace=True)\n","      )\n","      (cbr_2): conv2DBatchNormRelu(\n","        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)\n","        (batchnorm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu): ReLU(inplace=True)\n","      )\n","      (cb_3): conv2DBatchNorm(\n","        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","      (relu): ReLU(inplace=True)\n","    )\n","    (block4): bottleNeckIdentifyPSP(\n","      (cbr_1): conv2DBatchNormRelu(\n","        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu): ReLU(inplace=True)\n","      )\n","      (cbr_2): conv2DBatchNormRelu(\n","        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)\n","        (batchnorm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu): ReLU(inplace=True)\n","      )\n","      (cb_3): conv2DBatchNorm(\n","        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","      (relu): ReLU(inplace=True)\n","    )\n","    (block5): bottleNeckIdentifyPSP(\n","      (cbr_1): conv2DBatchNormRelu(\n","        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu): ReLU(inplace=True)\n","      )\n","      (cbr_2): conv2DBatchNormRelu(\n","        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)\n","        (batchnorm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu): ReLU(inplace=True)\n","      )\n","      (cb_3): conv2DBatchNorm(\n","        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","      (relu): ReLU(inplace=True)\n","    )\n","    (block6): bottleNeckIdentifyPSP(\n","      (cbr_1): conv2DBatchNormRelu(\n","        (conv): Conv2d(1024, 256, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu): ReLU(inplace=True)\n","      )\n","      (cbr_2): conv2DBatchNormRelu(\n","        (conv): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(2, 2), dilation=(2, 2), bias=False)\n","        (batchnorm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu): ReLU(inplace=True)\n","      )\n","      (cb_3): conv2DBatchNorm(\n","        (conv): Conv2d(256, 1024, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(1024, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","      (relu): ReLU(inplace=True)\n","    )\n","  )\n","  (feature_dilated_res_2): ResidualBlockPSP(\n","    (block1): bottleNeckPSP(\n","      (cbr_1): conv2DBatchNormRelu(\n","        (conv): Conv2d(1024, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu): ReLU(inplace=True)\n","      )\n","      (cbr_2): conv2DBatchNormRelu(\n","        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)\n","        (batchnorm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu): ReLU(inplace=True)\n","      )\n","      (cb_3): conv2DBatchNorm(\n","        (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","      (cb_residual): conv2DBatchNorm(\n","        (conv): Conv2d(1024, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","      (relu): ReLU(inplace=True)\n","    )\n","    (block2): bottleNeckIdentifyPSP(\n","      (cbr_1): conv2DBatchNormRelu(\n","        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu): ReLU(inplace=True)\n","      )\n","      (cbr_2): conv2DBatchNormRelu(\n","        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)\n","        (batchnorm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu): ReLU(inplace=True)\n","      )\n","      (cb_3): conv2DBatchNorm(\n","        (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","      (relu): ReLU(inplace=True)\n","    )\n","    (block3): bottleNeckIdentifyPSP(\n","      (cbr_1): conv2DBatchNormRelu(\n","        (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu): ReLU(inplace=True)\n","      )\n","      (cbr_2): conv2DBatchNormRelu(\n","        (conv): Conv2d(512, 512, kernel_size=(3, 3), stride=(1, 1), padding=(4, 4), dilation=(4, 4), bias=False)\n","        (batchnorm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","        (relu): ReLU(inplace=True)\n","      )\n","      (cb_3): conv2DBatchNorm(\n","        (conv): Conv2d(512, 2048, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","        (batchnorm): BatchNorm2d(2048, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      )\n","      (relu): ReLU(inplace=True)\n","    )\n","  )\n","  (pyramid_pooling): PyramidPooling(\n","    (avpool_1): AdaptiveAvgPool2d(output_size=6)\n","    (cbr_1): conv2DBatchNormRelu(\n","      (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (batchnorm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","    )\n","    (avpool_2): AdaptiveAvgPool2d(output_size=3)\n","    (cbr_2): conv2DBatchNormRelu(\n","      (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (batchnorm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","    )\n","    (avpool_3): AdaptiveAvgPool2d(output_size=2)\n","    (cbr_3): conv2DBatchNormRelu(\n","      (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (batchnorm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","    )\n","    (avpool_4): AdaptiveAvgPool2d(output_size=1)\n","    (cbr_4): conv2DBatchNormRelu(\n","      (conv): Conv2d(2048, 512, kernel_size=(1, 1), stride=(1, 1), bias=False)\n","      (batchnorm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","    )\n","  )\n","  (decode_feature): DecodePSPFeature(\n","    (cbr): conv2DBatchNormRelu(\n","      (conv): Conv2d(4096, 512, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (batchnorm): BatchNorm2d(512, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","    )\n","    (dropout): Dropout2d(p=0.1, inplace=False)\n","    (classification): Conv2d(512, 21, kernel_size=(1, 1), stride=(1, 1))\n","  )\n","  (aux): AuxiliaryPSPlayers(\n","    (cbr): conv2DBatchNormRelu(\n","      (conv): Conv2d(1024, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1), bias=False)\n","      (batchnorm): BatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)\n","      (relu): ReLU(inplace=True)\n","    )\n","    (dropout): Dropout2d(p=0.1, inplace=False)\n","    (classification): Conv2d(256, 21, kernel_size=(1, 1), stride=(1, 1))\n","  )\n",")"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"taEq9mZfB9GT","executionInfo":{"status":"ok","timestamp":1632469790972,"user_tz":-540,"elapsed":13918,"user":{"displayName":"龍","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10936710371482780121"}},"outputId":"a037139b-26e4-48fb-fc3f-cb4b118bdda3"},"source":["# ダミーデータの作成\n","batch_size = 2\n","dummy_img = torch.rand(batch_size, 3, 475, 475)\n","\n","# 計算\n","outputs = net(dummy_img)\n","print(outputs)\n"],"execution_count":15,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/torch/nn/functional.py:718: UserWarning: Named tensors and all their associated APIs are an experimental feature and subject to change. Please do not use them for anything important until they are released as stable. (Triggered internally at  /pytorch/c10/core/TensorImpl.h:1156.)\n","  return torch.max_pool2d(input, kernel_size, stride, padding, dilation, ceil_mode)\n"]},{"output_type":"stream","name":"stdout","text":["(tensor([[[[-0.0626, -0.0898, -0.1171,  ..., -0.1762, -0.1684, -0.1605],\n","          [-0.0631, -0.0800, -0.0970,  ..., -0.1157, -0.1036, -0.0915],\n","          [-0.0636, -0.0703, -0.0769,  ..., -0.0551, -0.0388, -0.0225],\n","          ...,\n","          [-0.0344, -0.0475, -0.0606,  ..., -0.0796, -0.1060, -0.1324],\n","          [-0.0293, -0.0370, -0.0447,  ..., -0.0979, -0.1402, -0.1826],\n","          [-0.0241, -0.0265, -0.0289,  ..., -0.1162, -0.1745, -0.2328]],\n","\n","         [[ 0.4633,  0.4739,  0.4844,  ...,  0.1590,  0.1683,  0.1775],\n","          [ 0.4975,  0.5034,  0.5093,  ...,  0.1823,  0.1975,  0.2127],\n","          [ 0.5317,  0.5329,  0.5341,  ...,  0.2055,  0.2266,  0.2478],\n","          ...,\n","          [ 0.1752,  0.1930,  0.2109,  ...,  0.0378,  0.0614,  0.0849],\n","          [ 0.1657,  0.1790,  0.1922,  ...,  0.0369,  0.0766,  0.1164],\n","          [ 0.1562,  0.1649,  0.1736,  ...,  0.0360,  0.0919,  0.1479]],\n","\n","         [[ 0.5035,  0.5498,  0.5962,  ...,  0.4263,  0.4796,  0.5329],\n","          [ 0.5016,  0.5472,  0.5928,  ...,  0.4141,  0.4649,  0.5158],\n","          [ 0.4998,  0.5446,  0.5895,  ...,  0.4018,  0.4503,  0.4987],\n","          ...,\n","          [ 0.2926,  0.2940,  0.2954,  ...,  0.5034,  0.5442,  0.5850],\n","          [ 0.2882,  0.2845,  0.2809,  ...,  0.5242,  0.5705,  0.6169],\n","          [ 0.2837,  0.2750,  0.2664,  ...,  0.5450,  0.5969,  0.6488]],\n","\n","         ...,\n","\n","         [[-0.1057, -0.0855, -0.0652,  ..., -0.1258, -0.2090, -0.2922],\n","          [-0.1068, -0.0835, -0.0602,  ..., -0.1180, -0.1933, -0.2686],\n","          [-0.1078, -0.0814, -0.0551,  ..., -0.1103, -0.1776, -0.2450],\n","          ...,\n","          [-0.3188, -0.3167, -0.3145,  ..., -0.4139, -0.4357, -0.4575],\n","          [-0.3449, -0.3453, -0.3457,  ..., -0.4528, -0.4713, -0.4899],\n","          [-0.3710, -0.3740, -0.3770,  ..., -0.4917, -0.5070, -0.5223]],\n","\n","         [[-0.4117, -0.3370, -0.2623,  ..., -0.3340, -0.3830, -0.4321],\n","          [-0.3994, -0.3354, -0.2714,  ..., -0.4055, -0.4547, -0.5039],\n","          [-0.3871, -0.3338, -0.2806,  ..., -0.4771, -0.5264, -0.5758],\n","          ...,\n","          [ 0.0778,  0.0758,  0.0738,  ..., -0.3026, -0.3109, -0.3192],\n","          [ 0.1498,  0.1442,  0.1386,  ..., -0.3250, -0.3427, -0.3605],\n","          [ 0.2218,  0.2126,  0.2033,  ..., -0.3474, -0.3745, -0.4017]],\n","\n","         [[ 0.1812,  0.1004,  0.0196,  ...,  0.1539,  0.2527,  0.3515],\n","          [ 0.1738,  0.1002,  0.0267,  ...,  0.1503,  0.2381,  0.3258],\n","          [ 0.1664,  0.1001,  0.0338,  ...,  0.1468,  0.2235,  0.3002],\n","          ...,\n","          [-0.1730, -0.2597, -0.3464,  ...,  0.1181,  0.1715,  0.2248],\n","          [-0.1681, -0.2618, -0.3555,  ...,  0.1422,  0.2014,  0.2606],\n","          [-0.1632, -0.2639, -0.3646,  ...,  0.1664,  0.2314,  0.2963]]],\n","\n","\n","        [[[-0.3982, -0.3682, -0.3383,  ..., -0.0657, -0.1133, -0.1608],\n","          [-0.3024, -0.2715, -0.2405,  ..., -0.0505, -0.1054, -0.1602],\n","          [-0.2067, -0.1747, -0.1428,  ..., -0.0353, -0.0974, -0.1595],\n","          ...,\n","          [-0.0474, -0.0654, -0.0833,  ...,  0.1906,  0.2099,  0.2293],\n","          [-0.0274, -0.0394, -0.0514,  ...,  0.2260,  0.2463,  0.2665],\n","          [-0.0074, -0.0134, -0.0195,  ...,  0.2615,  0.2826,  0.3037]],\n","\n","         [[ 0.0084,  0.0200,  0.0316,  ..., -0.2258, -0.2141, -0.2023],\n","          [ 0.0249,  0.0439,  0.0630,  ..., -0.1885, -0.1738, -0.1592],\n","          [ 0.0413,  0.0678,  0.0944,  ..., -0.1512, -0.1336, -0.1160],\n","          ...,\n","          [ 0.3277,  0.2739,  0.2200,  ..., -0.0882, -0.0659, -0.0435],\n","          [ 0.3350,  0.2753,  0.2157,  ..., -0.1254, -0.1111, -0.0967],\n","          [ 0.3423,  0.2768,  0.2113,  ..., -0.1627, -0.1563, -0.1499]],\n","\n","         [[ 0.7559,  0.7499,  0.7439,  ...,  0.3209,  0.2862,  0.2514],\n","          [ 0.7343,  0.7240,  0.7137,  ...,  0.3317,  0.3010,  0.2703],\n","          [ 0.7127,  0.6980,  0.6834,  ...,  0.3426,  0.3159,  0.2892],\n","          ...,\n","          [ 0.3678,  0.3239,  0.2801,  ...,  0.4086,  0.4134,  0.4183],\n","          [ 0.3313,  0.2805,  0.2297,  ...,  0.4304,  0.4319,  0.4335],\n","          [ 0.2948,  0.2371,  0.1794,  ...,  0.4522,  0.4504,  0.4487]],\n","\n","         ...,\n","\n","         [[ 0.4862,  0.4876,  0.4891,  ..., -0.3840, -0.4286, -0.4731],\n","          [ 0.4345,  0.4380,  0.4415,  ..., -0.3277, -0.3669, -0.4060],\n","          [ 0.3828,  0.3884,  0.3940,  ..., -0.2714, -0.3052, -0.3389],\n","          ...,\n","          [-0.1165, -0.1456, -0.1748,  ..., -0.5199, -0.4793, -0.4387],\n","          [-0.0808, -0.1182, -0.1556,  ..., -0.5109, -0.4632, -0.4156],\n","          [-0.0452, -0.0908, -0.1365,  ..., -0.5019, -0.4472, -0.3925]],\n","\n","         [[ 0.0009, -0.0210, -0.0428,  ...,  0.0469,  0.1004,  0.1538],\n","          [-0.0098, -0.0276, -0.0454,  ...,  0.0601,  0.1087,  0.1573],\n","          [-0.0204, -0.0342, -0.0480,  ...,  0.0732,  0.1170,  0.1608],\n","          ...,\n","          [-0.0992, -0.0560, -0.0128,  ...,  0.0971,  0.1143,  0.1315],\n","          [-0.0431, -0.0084,  0.0264,  ...,  0.0506,  0.0679,  0.0852],\n","          [ 0.0130,  0.0393,  0.0656,  ...,  0.0041,  0.0215,  0.0389]],\n","\n","         [[-0.3435, -0.3595, -0.3754,  ..., -0.1885, -0.1179, -0.0473],\n","          [-0.3134, -0.3336, -0.3538,  ..., -0.1571, -0.0852, -0.0134],\n","          [-0.2832, -0.3077, -0.3322,  ..., -0.1257, -0.0526,  0.0205],\n","          ...,\n","          [-0.5309, -0.5241, -0.5174,  ..., -0.1873, -0.1985, -0.2096],\n","          [-0.5230, -0.5091, -0.4953,  ..., -0.2147, -0.2372, -0.2597],\n","          [-0.5151, -0.4942, -0.4732,  ..., -0.2422, -0.2760, -0.3098]]]],\n","       grad_fn=<UpsampleBilinear2DBackward1>), tensor([[[[-1.0973e-01, -1.1223e-01, -1.1473e-01,  ...,  3.3196e-01,\n","            3.1693e-01,  3.0191e-01],\n","          [-5.9183e-02, -7.1958e-02, -8.4733e-02,  ...,  2.5581e-01,\n","            2.3915e-01,  2.2248e-01],\n","          [-8.6390e-03, -3.1690e-02, -5.4741e-02,  ...,  1.7967e-01,\n","            1.6136e-01,  1.4306e-01],\n","          ...,\n","          [ 1.8872e-01,  1.0638e-01,  2.4040e-02,  ..., -3.2250e-01,\n","           -3.3185e-01, -3.4119e-01],\n","          [ 1.5781e-01,  7.6339e-02, -5.1345e-03,  ..., -3.6612e-01,\n","           -3.7409e-01, -3.8207e-01],\n","          [ 1.2691e-01,  4.6299e-02, -3.4309e-02,  ..., -4.0973e-01,\n","           -4.1634e-01, -4.2295e-01]],\n","\n","         [[ 3.0813e-01,  2.7359e-01,  2.3906e-01,  ..., -1.2764e-01,\n","           -1.2101e-01, -1.1438e-01],\n","          [ 2.3381e-01,  2.1350e-01,  1.9319e-01,  ..., -1.1641e-01,\n","           -1.2190e-01, -1.2739e-01],\n","          [ 1.5949e-01,  1.5341e-01,  1.4733e-01,  ..., -1.0517e-01,\n","           -1.2279e-01, -1.4041e-01],\n","          ...,\n","          [-2.8070e-01, -2.4445e-01, -2.0821e-01,  ...,  2.2582e-01,\n","            2.5789e-01,  2.8995e-01],\n","          [-2.9472e-01, -2.4957e-01, -2.0441e-01,  ...,  2.1366e-01,\n","            2.3969e-01,  2.6572e-01],\n","          [-3.0874e-01, -2.5468e-01, -2.0062e-01,  ...,  2.0150e-01,\n","            2.2150e-01,  2.4150e-01]],\n","\n","         [[ 1.8306e-02,  1.5730e-03, -1.5160e-02,  ...,  2.4287e-02,\n","            5.0246e-02,  7.6204e-02],\n","          [ 1.2470e-02, -1.8032e-03, -1.6077e-02,  ...,  1.5517e-03,\n","            1.5640e-02,  2.9728e-02],\n","          [ 6.6340e-03, -5.1795e-03, -1.6993e-02,  ..., -2.1184e-02,\n","           -1.8966e-02, -1.6749e-02],\n","          ...,\n","          [ 1.7661e-01,  1.4298e-01,  1.0935e-01,  ..., -2.6177e-02,\n","           -2.6560e-02, -2.6943e-02],\n","          [ 2.5145e-01,  2.0616e-01,  1.6088e-01,  ..., -3.8587e-02,\n","           -3.4436e-02, -3.0284e-02],\n","          [ 3.2629e-01,  2.6935e-01,  2.1241e-01,  ..., -5.0998e-02,\n","           -4.2311e-02, -3.3625e-02]],\n","\n","         ...,\n","\n","         [[ 5.4661e-01,  5.6311e-01,  5.7961e-01,  ...,  1.9587e-01,\n","            1.4711e-01,  9.8346e-02],\n","          [ 5.5554e-01,  5.7174e-01,  5.8793e-01,  ...,  1.5573e-01,\n","            1.0023e-01,  4.4741e-02],\n","          [ 5.6447e-01,  5.8036e-01,  5.9626e-01,  ...,  1.1559e-01,\n","            5.3361e-02, -8.8649e-03],\n","          ...,\n","          [ 4.3097e-02,  4.4083e-02,  4.5069e-02,  ...,  1.2706e-01,\n","            1.4430e-01,  1.6153e-01],\n","          [ 3.4252e-02,  2.8849e-02,  2.3445e-02,  ...,  1.5366e-01,\n","            1.7920e-01,  2.0475e-01],\n","          [ 2.5406e-02,  1.3614e-02,  1.8215e-03,  ...,  1.8026e-01,\n","            2.1411e-01,  2.4796e-01]],\n","\n","         [[ 1.6417e-01,  1.0898e-01,  5.3798e-02,  ...,  1.7509e-01,\n","            2.3705e-01,  2.9900e-01],\n","          [ 1.5429e-01,  1.0891e-01,  6.3531e-02,  ...,  1.5431e-01,\n","            2.1359e-01,  2.7287e-01],\n","          [ 1.4441e-01,  1.0884e-01,  7.3264e-02,  ...,  1.3352e-01,\n","            1.9013e-01,  2.4673e-01],\n","          ...,\n","          [ 7.7725e-02,  5.5059e-02,  3.2394e-02,  ..., -5.8829e-02,\n","           -4.7779e-03,  4.9274e-02],\n","          [ 9.4972e-02,  6.4822e-02,  3.4671e-02,  ...,  1.5480e-02,\n","            7.5568e-02,  1.3566e-01],\n","          [ 1.1222e-01,  7.4584e-02,  3.6948e-02,  ...,  8.9790e-02,\n","            1.5591e-01,  2.2204e-01]],\n","\n","         [[-7.0372e-01, -6.5161e-01, -5.9950e-01,  ..., -4.2912e-01,\n","           -3.9792e-01, -3.6672e-01],\n","          [-7.4230e-01, -6.8929e-01, -6.3628e-01,  ..., -3.9423e-01,\n","           -3.6459e-01, -3.3496e-01],\n","          [-7.8089e-01, -7.2698e-01, -6.7307e-01,  ..., -3.5934e-01,\n","           -3.3127e-01, -3.0320e-01],\n","          ...,\n","          [-4.5601e-01, -4.4320e-01, -4.3038e-01,  ..., -4.0448e-02,\n","           -8.0483e-03,  2.4352e-02],\n","          [-4.5814e-01, -4.3978e-01, -4.2142e-01,  ..., -1.5241e-02,\n","            2.1877e-02,  5.8996e-02],\n","          [-4.6028e-01, -4.3637e-01, -4.1246e-01,  ...,  9.9664e-03,\n","            5.1803e-02,  9.3639e-02]]],\n","\n","\n","        [[[ 1.9668e-01,  1.5433e-01,  1.1199e-01,  ...,  7.8013e-02,\n","            2.1533e-02, -3.4947e-02],\n","          [ 2.1879e-01,  1.6585e-01,  1.1291e-01,  ...,  1.0908e-02,\n","           -3.6827e-02, -8.4562e-02],\n","          [ 2.4089e-01,  1.7736e-01,  1.1384e-01,  ..., -5.6196e-02,\n","           -9.5187e-02, -1.3418e-01],\n","          ...,\n","          [ 4.2483e-01,  3.7290e-01,  3.2097e-01,  ..., -3.4948e-01,\n","           -3.7577e-01, -4.0207e-01],\n","          [ 4.6037e-01,  4.0905e-01,  3.5774e-01,  ..., -3.6087e-01,\n","           -3.8011e-01, -3.9936e-01],\n","          [ 4.9590e-01,  4.4520e-01,  3.9451e-01,  ..., -3.7225e-01,\n","           -3.8445e-01, -3.9665e-01]],\n","\n","         [[ 3.0337e-02,  9.2686e-02,  1.5504e-01,  ...,  1.7088e-01,\n","            2.0736e-01,  2.4384e-01],\n","          [-8.6690e-03,  4.8429e-02,  1.0553e-01,  ...,  1.9159e-01,\n","            2.2922e-01,  2.6685e-01],\n","          [-4.7675e-02,  4.1709e-03,  5.6017e-02,  ...,  2.1230e-01,\n","            2.5107e-01,  2.8985e-01],\n","          ...,\n","          [ 2.4575e-04,  3.4645e-02,  6.9044e-02,  ...,  3.9229e-01,\n","            4.4820e-01,  5.0410e-01],\n","          [-5.2192e-02, -2.5989e-03,  4.6994e-02,  ...,  4.3783e-01,\n","            4.9020e-01,  5.4256e-01],\n","          [-1.0463e-01, -3.9843e-02,  2.4943e-02,  ...,  4.8337e-01,\n","            5.3220e-01,  5.8102e-01]],\n","\n","         [[-2.6198e-01, -2.8244e-01, -3.0291e-01,  ..., -1.5462e-01,\n","           -1.7373e-01, -1.9284e-01],\n","          [-3.0321e-01, -3.1424e-01, -3.2527e-01,  ..., -1.3438e-01,\n","           -1.4895e-01, -1.6351e-01],\n","          [-3.4444e-01, -3.4603e-01, -3.4762e-01,  ..., -1.1415e-01,\n","           -1.2417e-01, -1.3419e-01],\n","          ...,\n","          [ 6.9468e-02,  4.5417e-02,  2.1365e-02,  ..., -1.7102e-02,\n","            2.3479e-02,  6.4061e-02],\n","          [ 2.6053e-02,  8.4685e-03, -9.1161e-03,  ..., -4.8390e-03,\n","            4.0072e-02,  8.4982e-02],\n","          [-1.7362e-02, -2.8480e-02, -3.9598e-02,  ...,  7.4244e-03,\n","            5.6664e-02,  1.0590e-01]],\n","\n","         ...,\n","\n","         [[ 6.9514e-01,  6.4390e-01,  5.9265e-01,  ...,  2.8565e-01,\n","            2.8071e-01,  2.7578e-01],\n","          [ 6.5341e-01,  6.1127e-01,  5.6913e-01,  ...,  2.2724e-01,\n","            2.1553e-01,  2.0383e-01],\n","          [ 6.1168e-01,  5.7864e-01,  5.4560e-01,  ...,  1.6883e-01,\n","            1.5035e-01,  1.3188e-01],\n","          ...,\n","          [-2.6805e-02, -1.1347e-02,  4.1104e-03,  ...,  2.4077e-02,\n","            1.1171e-03, -2.1843e-02],\n","          [-6.9148e-02, -4.6020e-02, -2.2892e-02,  ..., -4.1856e-03,\n","           -1.9085e-02, -3.3984e-02],\n","          [-1.1149e-01, -8.0693e-02, -4.9895e-02,  ..., -3.2449e-02,\n","           -3.9287e-02, -4.6125e-02]],\n","\n","         [[ 3.6149e-02,  1.3780e-02, -8.5879e-03,  ...,  5.8167e-02,\n","            7.8952e-02,  9.9738e-02],\n","          [ 4.4916e-02,  1.5113e-02, -1.4691e-02,  ...,  8.5346e-02,\n","            1.0527e-01,  1.2519e-01],\n","          [ 5.3684e-02,  1.6445e-02, -2.0794e-02,  ...,  1.1253e-01,\n","            1.3158e-01,  1.5064e-01],\n","          ...,\n","          [-5.9092e-02, -4.2654e-02, -2.6216e-02,  ..., -1.0823e-01,\n","           -6.6939e-02, -2.5645e-02],\n","          [-6.3535e-02, -5.2433e-02, -4.1331e-02,  ..., -7.2073e-02,\n","           -2.2551e-02,  2.6971e-02],\n","          [-6.7979e-02, -6.2213e-02, -5.6447e-02,  ..., -3.5912e-02,\n","            2.1838e-02,  7.9588e-02]],\n","\n","         [[-4.7187e-01, -4.6242e-01, -4.5297e-01,  ..., -5.7136e-01,\n","           -5.2278e-01, -4.7420e-01],\n","          [-5.7914e-01, -5.5983e-01, -5.4052e-01,  ..., -5.5197e-01,\n","           -5.1324e-01, -4.7451e-01],\n","          [-6.8641e-01, -6.5724e-01, -6.2808e-01,  ..., -5.3258e-01,\n","           -5.0370e-01, -4.7482e-01],\n","          ...,\n","          [-6.2908e-01, -6.0453e-01, -5.7999e-01,  ..., -3.7319e-01,\n","           -3.6785e-01, -3.6251e-01],\n","          [-5.8565e-01, -5.7060e-01, -5.5554e-01,  ..., -3.9924e-01,\n","           -3.9347e-01, -3.8770e-01],\n","          [-5.4222e-01, -5.3666e-01, -5.3110e-01,  ..., -4.2528e-01,\n","           -4.1909e-01, -4.1289e-01]]]], grad_fn=<UpsampleBilinear2DBackward1>))\n"]}]},{"cell_type":"markdown","metadata":{"id":"Y3XgGpJUB9GT"},"source":["以上"]},{"cell_type":"code","metadata":{"id":"XVJBRYXrqlGo","executionInfo":{"status":"ok","timestamp":1632469821989,"user_tz":-540,"elapsed":206,"user":{"displayName":"龍","photoUrl":"https://lh3.googleusercontent.com/a/default-user=s64","userId":"10936710371482780121"}}},"source":[""],"execution_count":15,"outputs":[]}]}